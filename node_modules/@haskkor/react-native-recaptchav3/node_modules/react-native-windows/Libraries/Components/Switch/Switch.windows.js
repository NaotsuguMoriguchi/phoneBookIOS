/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * @format
 */
'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_native_1 = require("react-native");
var styles = react_native_1.StyleSheet.create({
    rctSwitch: { height: 31, width: 51 },
});
var RCTSwitch = react_native_1.requireNativeComponent('RCTSwitch');
/**
 * A visual toggle between two mutually exclusive states.
 *
 * This is a controlled component that requires an `onValueChange` callback that
 * updates the `value` prop in order for the component to reflect user actions.
 * If the `value` prop is not updated, the component will continue to render the
 * supplied `value` prop instead of the expected result of any user actions.
 *
 * @keyword switch
 * @keyword toggle
 */
var Switch = /** @class */ (function (_super) {
    __extends(Switch, _super);
    function Switch(props) {
        var _this = _super.call(this, props) || this;
        _this.componentDidUpdate = function () {
            // This is necessary in case native updates the switch and JS decides
            // that the update should be ignored and we should stick with the value
            // that we have in JS.
            var value = _this.props.value === true;
            if (_this._lastNativeValue !== value && _this._rctSwitch) {
                _this._rctSwitch.setNativeProps({ value: value });
            }
        };
        _this._setRef = function (switchRef /*RCTSwitch*/) {
            _this._rctSwitch = switchRef;
        };
        _this._onChange = function (event) {
            _this.props.onChange && _this.props.onChange(event);
            _this.props.onValueChange &&
                _this.props.onValueChange(event.nativeEvent.value);
            _this._lastNativeValue = event.nativeEvent.value;
            _this.forceUpdate();
        };
        _this._rctSwitch = React.createRef();
        _this._lastNativeValue = false;
        return _this;
    }
    Switch.prototype.render = function () {
        var props = __assign({}, this.props);
        var _thumbColor = this.props.thumbColor;
        var _trackColorForFalse = this.props.trackColor
            ? this.props.trackColor.false
            : undefined;
        var _trackColorForTrue = this.props.trackColor
            ? this.props.trackColor.true
            : undefined;
        if (this.props.thumbTintColor !== undefined) {
            _thumbColor = this.props.thumbTintColor;
            if (__DEV__) {
                console.warn('Switch: `thumbTintColor` is deprecated, use `thumbColor` instead.');
            }
        }
        if (this.props.tintColor !== undefined) {
            _trackColorForFalse = this.props.tintColor;
            if (__DEV__) {
                console.warn('Switch: `tintColor` is deprecated, use `trackColor` instead.');
            }
        }
        if (this.props.onTintColor !== undefined) {
            _thumbColor = this.props.onTintColor;
            if (__DEV__) {
                console.warn('Switch: `onTintColor` is deprecated, use `trackColor` instead.');
            }
        }
        props.onResponderTerminationRequest = function () { return false; };
        props.onStartShouldSetResponder = function () { return true; };
        props.style = [styles.rctSwitch, this.props.style];
        props.value = this.props.value === true;
        props.accessibilityRole = this.props.accessibilityRole
            ? this.props.accessibilityRole
            : 'button';
        props.thumbTintColor = _thumbColor;
        props.tintColor = _trackColorForFalse;
        props.onTintColor = _trackColorForTrue;
        return (React.createElement(RCTSwitch, __assign({}, props, { onChange: this._onChange, ref: this._setRef })));
    };
    return Switch;
}(React.Component));
module.exports = Switch;
//# sourceMappingURL=Switch.windows.js.map