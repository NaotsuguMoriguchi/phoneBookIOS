{"version":3,"sources":["Hooks.ts"],"names":["useMemoOne","Animated","horizontalPanGestureHandler","onGestureEvent","panGestureHandler","verticalPanGestureHandler","vec","Clock","Value","diff","set","useCode","debug","block","useGestureHandler","nativeEvent","deps","usePanGestureHandler","useVerticalPanGestureHandler","useHorizontalPanGestureHandler","useVector","x","y","createValue","useClock","useValue","value","useValues","values","map","v","useNamedValues","result","Object","keys","forEach","key","useClocks","numberOfClocks","Array","fill","useDiff","node","dDiff","useDebug","name"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useMemoOne } from \"use-memo-one\";\nimport Animated from \"react-native-reanimated\";\nimport {\n  horizontalPanGestureHandler,\n  onGestureEvent,\n  panGestureHandler,\n  verticalPanGestureHandler,\n} from \"./Gesture\";\nimport { vec } from \"./Vectors\";\n\ntype Dependencies = readonly unknown[];\n\nconst { Clock, Value, diff, set, useCode, debug, block } = Animated;\n\nexport const useGestureHandler = (\n  nativeEvent: Parameters<typeof onGestureEvent>[0],\n  deps: Dependencies = []\n) => useMemoOne(() => onGestureEvent(nativeEvent), deps);\n\nexport const usePanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => panGestureHandler(), deps);\n\nexport const useVerticalPanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => verticalPanGestureHandler(), deps);\n\nexport const useHorizontalPanGestureHandler = (deps: Dependencies = []) =>\n  useMemoOne(() => horizontalPanGestureHandler(), deps);\n\ntype Atomic = string | number | boolean;\n\nexport const useVector = (x: number, y: number, deps: Dependencies = []) =>\n  useMemoOne(() => vec.createValue(x, y), deps);\n\nexport const useClock = (deps: Dependencies) =>\n  useMemoOne(() => new Clock(), deps);\n\nexport const useValue = <V extends Atomic>(value: V, deps: Dependencies = []) =>\n  useMemoOne(() => new Value(value), deps);\n\nexport const useValues = <V extends Atomic>(\n  values: V[],\n  deps: Dependencies = []\n): Animated.Value<V>[] =>\n  useMemoOne(() => values.map((v) => new Value(v)), deps);\n\nexport const useNamedValues = <V extends Atomic, K extends string>(\n  values: Record<K, V>,\n  deps: Dependencies = []\n): Record<K, Animated.Value<V>> =>\n  useMemoOne(() => {\n    const result: Record<string, Animated.Value<V>> = {};\n    Object.keys(values).forEach((key) => {\n      result[key as K] = new Value(values[key as K]);\n    });\n    return result;\n  }, deps);\n\nexport const useClocks = (\n  numberOfClocks: number,\n  deps: Dependencies = []\n): Animated.Clock[] =>\n  useMemoOne(\n    () => new Array(numberOfClocks).fill(0).map(() => new Clock()),\n    deps\n  );\n\nexport const useDiff = (node: Animated.Node<number>) => {\n  const [dDiff] = useValues<number>([0], [node]);\n  useCode(() => set(dDiff, diff(node)), [dDiff, node]);\n  return dDiff;\n};\n\nexport const useDebug = (values: { [key: string]: Animated.Node<number> }) => {\n  const keys = Object.keys(values);\n  useCode(() => block(keys.map((name) => debug(name, values[name]))), [\n    keys,\n    values,\n  ]);\n};\n"]}