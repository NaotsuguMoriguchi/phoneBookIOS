{"version":3,"sources":["Math.ts"],"names":["Animated","eq","set","cond","atan","add","multiply","lessThan","abs","divide","sub","min2","min","max2","max","reRound","round","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","floor","bin","value","fract","x","inc","dec","args","reduce","acc","arg","mix","origin","destination","clamp","lowerBound","upperBound","between","inclusive","approximates","a","b","precision","toRad","deg","Math","PI","toDeg","rad","atan2","y","cubicBezier","t","p0","p1","p2","p3","term","c","d","p"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,yBAArB,C,GAGEC,CAAAA,E,CAoBED,Q,CApBFC,E,CACAC,G,CAmBEF,Q,CAnBFE,G,CACAC,I,CAkBEH,Q,CAlBFG,I,CACAC,I,CAiBEJ,Q,CAjBFI,I,CACAC,G,CAgBEL,Q,CAhBFK,G,CACAC,Q,CAeEN,Q,CAfFM,Q,CACAC,Q,CAcEP,Q,CAdFO,Q,CACAC,G,CAaER,Q,CAbFQ,G,CACAC,M,CAYET,Q,CAZFS,M,CACAC,G,CAWEV,Q,CAXFU,G,CACKC,I,CAUHX,Q,CAVFY,G,CACKC,I,CASHb,Q,CATFc,G,CACOC,O,CAQLf,Q,CARFgB,K,CACAC,W,CAOEjB,Q,CAPFiB,W,CACAC,G,CAMElB,Q,CANFkB,G,CACAC,G,CAKEnB,Q,CALFmB,G,CACAC,W,CAIEpB,Q,CAJFoB,W,CACAC,Q,CAGErB,Q,CAHFqB,Q,CACAC,I,CAEEtB,Q,CAFFsB,I,CACAC,K,CACEvB,Q,CADFuB,K,CAGF,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,KAAD,QAA4BA,CAAAA,KAAK,CAAG,CAAH,CAAO,CAAxC,EAAZ,CAEP,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,CAAD,QAA8BjB,CAAAA,GAAG,CAACiB,CAAD,CAAIJ,KAAK,CAACI,CAAD,CAAT,CAAjC,EAAd,CAEP,MAAO,IAAMC,CAAAA,GAAG,CAAGN,IAAI,CAAC,SAACG,KAAD,QACtBvB,CAAAA,GAAG,CAACuB,KAAD,CAAQpB,GAAG,CAACoB,KAAD,CAAQ,CAAR,CAAX,CADmB,EAAD,CAAhB,CAIP,MAAO,IAAMI,CAAAA,GAAG,CAAGP,IAAI,CAAC,SAACG,KAAD,QACtBvB,CAAAA,GAAG,CAACuB,KAAD,CAAQf,GAAG,CAACe,KAAD,CAAQ,CAAR,CAAX,CADmB,EAAD,CAAhB,CAIP,MAAO,IAAMb,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,iCAAIkB,IAAJ,0CAAIA,IAAJ,8BACjBA,CAAAA,IAAI,CAACC,MAAL,CAAY,SAACC,GAAD,CAAMC,GAAN,QAActB,CAAAA,IAAI,CAACqB,GAAD,CAAMC,GAAN,CAAlB,EAAZ,CADiB,EAAZ,CAGP,MAAO,IAAMnB,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,kCAAIgB,IAAJ,+CAAIA,IAAJ,gCACjBA,CAAAA,IAAI,CAACC,MAAL,CAAY,SAACC,GAAD,CAAMC,GAAN,QAAcpB,CAAAA,IAAI,CAACmB,GAAD,CAAMC,GAAN,CAAlB,EAAZ,CADiB,EAAZ,CAGP,MAAO,IAAMC,CAAAA,GAAG,CAAGZ,IAAI,CACrB,SACEG,KADF,CAEEU,MAFF,CAGEC,WAHF,QAIK/B,CAAAA,GAAG,CAAC8B,MAAD,CAAS7B,QAAQ,CAACmB,KAAD,CAAQf,GAAG,CAAC0B,WAAD,CAAcD,MAAd,CAAX,CAAjB,CAJR,EADqB,CAAhB,CAQP,MAAO,IAAME,CAAAA,KAAK,CAAGf,IAAI,CACvB,SACEG,KADF,CAEEa,UAFF,CAGEC,UAHF,QAI4B5B,CAAAA,IAAI,CAACE,IAAI,CAACyB,UAAD,CAAab,KAAb,CAAL,CAA0Bc,UAA1B,CAJhC,EADuB,CAAlB,CAQP,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CACrBf,KADqB,CAErBa,UAFqB,CAGrBC,UAHqB,CAKlB,IADHE,CAAAA,SACG,2DADS,IACT,CACH,GAAIA,SAAJ,CAAe,CACb,MAAOtB,CAAAA,GAAG,CAACC,WAAW,CAACK,KAAD,CAAQa,UAAR,CAAZ,CAAiCjB,QAAQ,CAACI,KAAD,CAAQc,UAAR,CAAzC,CAAV,CACD,CACD,MAAOpB,CAAAA,GAAG,CAACF,WAAW,CAACQ,KAAD,CAAQa,UAAR,CAAZ,CAAiC/B,QAAQ,CAACkB,KAAD,CAAQc,UAAR,CAAzC,CAAV,CACD,CAVM,CAYP,MAAO,IAAMG,CAAAA,YAAY,CAAGpB,IAAI,CAC9B,SACEqB,CADF,CAEEC,CAFF,KAGEC,CAAAA,SAHF,2DAG0C,KAH1C,OAIKtC,CAAAA,QAAQ,CAACC,GAAG,CAACE,GAAG,CAACiC,CAAD,CAAIC,CAAJ,CAAJ,CAAJ,CAAiBC,SAAjB,CAJb,EAD8B,CAAzB,CAQP,MAAO,IAAMC,CAAAA,KAAK,CAAGxB,IAAI,CACvB,SAACyB,GAAD,QACEzC,CAAAA,QAAQ,CAACyC,GAAD,CAAMC,IAAI,CAACC,EAAL,CAAU,GAAhB,CADV,EADuB,CAAlB,CAKP,MAAO,IAAMC,CAAAA,KAAK,CAAG5B,IAAI,CACvB,SAAC6B,GAAD,QACE7C,CAAAA,QAAQ,CAAC6C,GAAD,CAAM,IAAMH,IAAI,CAACC,EAAjB,CADV,EADuB,CAAlB,CASP,MAAO,IAAMG,CAAAA,KAAK,CAAG9B,IAAI,CACvB,SAAC+B,CAAD,CAAgC1B,CAAhC,CAAkE,CAChE,GAAMgB,CAAAA,CAAC,CAAGvC,IAAI,CAACK,MAAM,CAAC4C,CAAD,CAAI1B,CAAJ,CAAP,CAAd,CADgE,GAExDsB,CAAAA,EAFwD,CAEjDD,IAFiD,CAExDC,EAFwD,CAGhE,MAAO9C,CAAAA,IAAI,CACTc,WAAW,CAACU,CAAD,CAAI,CAAJ,CADF,CAETgB,CAFS,CAGTxC,IAAI,CACFgB,GAAG,CAACZ,QAAQ,CAACoB,CAAD,CAAI,CAAJ,CAAT,CAAiBP,WAAW,CAACiC,CAAD,CAAI,CAAJ,CAA5B,CADD,CAEFhD,GAAG,CAACsC,CAAD,CAAIM,EAAJ,CAFD,CAGF9C,IAAI,CACFgB,GAAG,CAACZ,QAAQ,CAACoB,CAAD,CAAI,CAAJ,CAAT,CAAiBpB,QAAQ,CAAC8C,CAAD,CAAI,CAAJ,CAAzB,CADD,CAEF3C,GAAG,CAACiC,CAAD,CAAIM,EAAJ,CAFD,CAGF9C,IAAI,CACFgB,GAAG,CAAClB,EAAE,CAAC0B,CAAD,CAAI,CAAJ,CAAH,CAAWV,WAAW,CAACoC,CAAD,CAAI,CAAJ,CAAtB,CADD,CAEFJ,EAAE,CAAG,CAFH,CAGF9C,IAAI,CAACgB,GAAG,CAAClB,EAAE,CAAC0B,CAAD,CAAI,CAAJ,CAAH,CAAWpB,QAAQ,CAAC8C,CAAD,CAAI,CAAJ,CAAnB,CAAJ,CAAgC,CAACJ,EAAD,CAAM,CAAtC,CAAyC,CAAzC,CAHF,CAHF,CAHF,CAHK,CAAX,CAiBD,CArBsB,CAAlB,CAwBP,MAAO,IAAMK,CAAAA,WAAW,CAAGhC,IAAI,CAC7B,SACEiC,CADF,CAEEC,EAFF,CAGEC,EAHF,CAIEC,EAJF,CAKEC,EALF,CAM4B,CAC1B,GAAMC,CAAAA,IAAI,CAAGlD,GAAG,CAAC,CAAD,CAAI6C,CAAJ,CAAhB,CACA,GAAMZ,CAAAA,CAAC,CAAGrC,QAAQ,CAAC,CAAD,CAAIY,GAAG,CAAC0C,IAAD,CAAO,CAAP,CAAP,CAAkB1C,GAAG,CAACqC,CAAD,CAAI,CAAJ,CAArB,CAA6BC,EAA7B,CAAlB,CACA,GAAMZ,CAAAA,CAAC,CAAGtC,QAAQ,CAAC,CAAD,CAAIY,GAAG,CAAC0C,IAAD,CAAO,CAAP,CAAP,CAAkB1C,GAAG,CAACqC,CAAD,CAAI,CAAJ,CAArB,CAA6BE,EAA7B,CAAlB,CACA,GAAMI,CAAAA,CAAC,CAAGvD,QAAQ,CAAC,CAAD,CAAIY,GAAG,CAAC0C,IAAD,CAAO,CAAP,CAAP,CAAkB1C,GAAG,CAACqC,CAAD,CAAI,CAAJ,CAArB,CAA6BG,EAA7B,CAAlB,CACA,GAAMI,CAAAA,CAAC,CAAGxD,QAAQ,CAAC,CAAD,CAAIY,GAAG,CAAC0C,IAAD,CAAO,CAAP,CAAP,CAAkB1C,GAAG,CAACqC,CAAD,CAAI,CAAJ,CAArB,CAA6BI,EAA7B,CAAlB,CACA,MAAOtD,CAAAA,GAAG,CAACsC,CAAD,CAAIC,CAAJ,CAAOiB,CAAP,CAAUC,CAAV,CAAV,CACD,CAd4B,CAAxB,CAiBP,MAAO,IAAM9C,CAAAA,KAAK,CAAGM,IAAI,CACvB,SACEG,KADF,CAGK,IADHoB,CAAAA,SACG,2DADqC,CACrC,CACH,GAAMkB,CAAAA,CAAC,CAAG7C,GAAG,CAAC,EAAD,CAAK2B,SAAL,CAAb,CACA,MAAOpC,CAAAA,MAAM,CAACM,OAAO,CAACT,QAAQ,CAACmB,KAAD,CAAQsC,CAAR,CAAT,CAAR,CAA8BA,CAA9B,CAAb,CACD,CAPsB,CAAlB","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  eq,\n  set,\n  cond,\n  atan,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  round: reRound,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc,\n  floor,\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const fract = (x: Animated.Node<number>) => sub(x, floor(x));\n\nexport const inc = proc((value: Animated.Value<number>) =>\n  set(value, add(value, 1))\n);\n\nexport const dec = proc((value: Animated.Value<number>) =>\n  set(value, sub(value, 1))\n);\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const mix = proc(\n  (\n    value: Animated.Adaptable<number>,\n    origin: Animated.Adaptable<number>,\n    destination: Animated.Adaptable<number>\n  ) => add(origin, multiply(value, sub(destination, origin)))\n);\n\nexport const clamp = proc(\n  (\n    value: Animated.Adaptable<number>,\n    lowerBound: Animated.Adaptable<number>,\n    upperBound: Animated.Adaptable<number>\n  ): Animated.Node<number> => min2(max2(lowerBound, value), upperBound)\n);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = proc(\n  (\n    a: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0.001\n  ) => lessThan(abs(sub(a, b)), precision)\n);\n\nexport const toRad = proc(\n  (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(deg, Math.PI / 180)\n);\n\nexport const toDeg = proc(\n  (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n    multiply(rad, 180 / Math.PI)\n);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\n// https://www.medcalc.org/manual/atan2_function.php\nexport const atan2 = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const a = atan(divide(y, x));\n    const { PI } = Math;\n    return cond(\n      greaterThan(x, 0),\n      a,\n      cond(\n        and(lessThan(x, 0), greaterOrEq(y, 0)),\n        add(a, PI),\n        cond(\n          and(lessThan(x, 0), lessThan(y, 0)),\n          sub(a, PI),\n          cond(\n            and(eq(x, 0), greaterThan(y, 0)),\n            PI / 2,\n            cond(and(eq(x, 0), lessThan(y, 0)), -PI / 2, 0)\n          )\n        )\n      )\n    );\n  }\n);\n\nexport const cubicBezier = proc(\n  (\n    t: Animated.Adaptable<number>,\n    p0: Animated.Adaptable<number>,\n    p1: Animated.Adaptable<number>,\n    p2: Animated.Adaptable<number>,\n    p3: Animated.Adaptable<number>\n  ): Animated.Node<number> => {\n    const term = sub(1, t);\n    const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n    const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n    const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n    const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n    return add(a, b, c, d);\n  }\n);\n\nexport const round = proc(\n  (\n    value: Animated.Adaptable<number>,\n    precision: Animated.Adaptable<number> = 0\n  ) => {\n    const p = pow(10, precision);\n    return divide(reRound(multiply(value, p)), p);\n  }\n);\n"]}