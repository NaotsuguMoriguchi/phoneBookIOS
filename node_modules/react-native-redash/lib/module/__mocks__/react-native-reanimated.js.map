{"version":3,"sources":["react-native-reanimated.ts"],"names":["Platform","Extrapolate","getValue","node","Array","length","AnimatedValue","val","Value","Node","block","arr","proc","cb","add","vals","map","v","reduce","acc","sub","divide","multiply","sin","a","Math","tan","cos","sqrt","min","b","max","pow","c","index","and","set","setValue","or","modulo","exp","asin","atan","acos","floor","abs","round","ceil","concat","eq","Number","neq","lessThan","greaterThan","greaterOrEq","lessOrEq","not","cond","color","r","g","OS","interpolate","inputRange","outputRange","inS","inE","outS","outE","value","progress","resultForNonZeroRange"],"mappings":"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","sourcesContent":["import { Platform } from \"react-native\";\nimport Animated from \"react-native-reanimated\";\n\nenum Extrapolate {\n  EXTEND = \"extend\",\n  CLAMP = \"clamp\",\n  IDENTITY = \"identity\",\n}\n\ninterface InterpolationConfig {\n  inputRange: ReadonlyArray<Animated.Adaptable<number>>;\n  outputRange: ReadonlyArray<Animated.Adaptable<number>>;\n  extrapolate?: Extrapolate;\n  extrapolateLeft?: Extrapolate;\n  extrapolateRight?: Extrapolate;\n}\n\nconst getValue = (node) => {\n  if (typeof node === \"number\") {\n    return node;\n  }\n  if (node instanceof Array) {\n    return getValue(node[node.length - 1]);\n  }\n  return node[\" __value\"];\n};\n\nclass AnimatedValue {\n  \" __value\": number;\n\n  constructor(val: number) {\n    this[\" __value\"] = val;\n  }\n\n  setValue(val: number) {\n    this[\" __value\"] = val;\n  }\n}\nexport default {\n  Value: AnimatedValue,\n  Node: AnimatedValue,\n  block: (arr) => arr[arr.length - 1],\n  proc: (cb) => cb,\n  add: (...vals) =>\n    new AnimatedValue(vals.map((v) => getValue(v)).reduce((acc, v) => acc + v)),\n  sub: (...vals) =>\n    new AnimatedValue(vals.map((v) => getValue(v)).reduce((acc, v) => acc - v)),\n  divide: (...vals) =>\n    new AnimatedValue(vals.map((v) => getValue(v)).reduce((acc, v) => acc / v)),\n  multiply: (...vals) =>\n    new AnimatedValue(vals.map((v) => getValue(v)).reduce((acc, v) => acc * v)),\n  sin: (a) => new AnimatedValue(Math.sin(getValue(a))),\n  tan: (a) => new AnimatedValue(Math.tan(getValue(a))),\n  cos: (a) => new AnimatedValue(Math.cos(getValue(a))),\n  sqrt: (a) => new AnimatedValue(Math.sqrt(getValue(a))),\n  min: (...a) => new AnimatedValue(Math.min(...a.map((b) => getValue(b)))),\n  max: (...a) => new AnimatedValue(Math.max(...a.map((b) => getValue(b)))),\n  pow: (...a) =>\n    new AnimatedValue(\n      a.reduce((b, c, index) => (index > 0 ? getValue(b) ** getValue(c) : c), 0)\n    ),\n  and: (a, b) => new AnimatedValue(getValue(a) && getValue(b)),\n  set: (a, b) => {\n    a.setValue(getValue(b));\n    return a;\n  },\n  or: (a, b) => new AnimatedValue(getValue(a) || getValue(b)),\n  modulo: (a, b) => new AnimatedValue(getValue(a) % getValue(b)),\n  exp: (a) => new AnimatedValue(Math.exp(getValue(a))),\n  asin: (a) => new AnimatedValue(Math.asin(getValue(a))),\n  atan: (a) => new AnimatedValue(Math.atan(getValue(a))),\n  acos: (a) => new AnimatedValue(Math.acos(getValue(a))),\n  floor: (a) => new AnimatedValue(Math.floor(getValue(a))),\n  abs: (a) => new AnimatedValue(Math.abs(getValue(a))),\n  round: (a) => new AnimatedValue(Math.round(getValue(a))),\n  ceil: (a) => new AnimatedValue(Math.ceil(getValue(a))),\n  concat: (a, b) => getValue(a) + b,\n  eq: (a, b) => new AnimatedValue(Number(getValue(a) === getValue(b))),\n  neq: (a, b) => new AnimatedValue(Number(getValue(a) !== getValue(b))),\n  lessThan: (a, b) => new AnimatedValue(Number(getValue(a) < getValue(b))),\n  greaterThan: (a, b) => new AnimatedValue(Number(getValue(a) > getValue(b))),\n  greaterOrEq: (a, b) => new AnimatedValue(Number(getValue(a) >= getValue(b))),\n  lessOrEq: (a, b) => new AnimatedValue(Number(getValue(a) <= getValue(b))),\n  not: (a) => new AnimatedValue(Number(!getValue(a))),\n  cond: (a, b, c) => new AnimatedValue(getValue(a) ? getValue(b) : getValue(c)),\n  color: (r, g, b, a = 1) => {\n    const color =\n      16777216 * Math.round(getValue(a) * 255) +\n      65536 * getValue(r) +\n      256 * getValue(g) +\n      getValue(b);\n    if (Platform.OS === \"android\") {\n      // on Android color is represented as signed 32 bit int\n      if (color < (1 << 31) >>> 0) {\n        return new AnimatedValue(color);\n      }\n      return new AnimatedValue(color - 2 ** 32);\n    }\n    return new AnimatedValue(color);\n  },\n  interpolate: (\n    v: Animated.Value<number>,\n    { inputRange, outputRange }: InterpolationConfig\n  ) => {\n    const [inS, inE] = [getValue(inputRange[0]), getValue(inputRange[1])];\n    const [outS, outE] = [getValue(outputRange[0]), getValue(outputRange[1])];\n    const value = getValue(v);\n    const progress = (value - inS) / (inE - inS);\n    // logic below was made in order to provide a compatibility witn an Animated API\n    const resultForNonZeroRange = outS + progress * (outE - outS);\n    if (inS === inE) {\n      if (value <= inS) {\n        return outS;\n      }\n      return outE;\n    }\n    return resultForNonZeroRange;\n  },\n  Extrapolate,\n};\n"]}