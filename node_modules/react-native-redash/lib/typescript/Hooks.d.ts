/// <reference types="react-native-gesture-handler" />
import Animated from "react-native-reanimated";
declare type Dependencies = readonly unknown[];
export declare const useGestureHandler: (nativeEvent: Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    x: Animated.Adaptable<number>;
    y: Animated.Adaptable<number>;
    absoluteX: Animated.Adaptable<number>;
    absoluteY: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    x: Animated.Adaptable<number>;
    y: Animated.Adaptable<number>;
    absoluteX: Animated.Adaptable<number>;
    absoluteY: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    x: Animated.Adaptable<number>;
    y: Animated.Adaptable<number>;
    absoluteX: Animated.Adaptable<number>;
    absoluteY: Animated.Adaptable<number>;
    force: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    x: Animated.Adaptable<number>;
    y: Animated.Adaptable<number>;
    absoluteX: Animated.Adaptable<number>;
    absoluteY: Animated.Adaptable<number>;
    translationX: Animated.Adaptable<number>;
    translationY: Animated.Adaptable<number>;
    velocityX: Animated.Adaptable<number>;
    velocityY: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    scale: Animated.Adaptable<number>;
    focalX: Animated.Adaptable<number>;
    focalY: Animated.Adaptable<number>;
    velocity: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    rotation: Animated.Adaptable<number>;
    anchorX: Animated.Adaptable<number>;
    anchorY: Animated.Adaptable<number>;
    velocity: Animated.Adaptable<number>;
}> | Partial<{
    handlerTag: Animated.Adaptable<number>;
    numberOfPointers: Animated.Adaptable<number>;
    state: Animated.Adaptable<import("react-native-gesture-handler").State>;
    oldState: Animated.Adaptable<import("react-native-gesture-handler").State>;
    x: Animated.Adaptable<number>;
    y: Animated.Adaptable<number>;
    absoluteX: Animated.Adaptable<number>;
    absoluteY: Animated.Adaptable<number>;
}>, deps?: Dependencies) => {
    onHandlerStateChange: (...args: any[]) => void;
    onGestureEvent: (...args: any[]) => void;
};
export declare const usePanGestureHandler: (deps?: Dependencies) => {
    position: import("./Vectors").Vector<Animated.Value<number>>;
    translation: import("./Vectors").Vector<Animated.Value<number>>;
    velocity: import("./Vectors").Vector<Animated.Value<number>>;
    state: Animated.Value<import("react-native-gesture-handler").State>;
    gestureHandler: {
        onHandlerStateChange: (...args: any[]) => void;
        onGestureEvent: (...args: any[]) => void;
    };
};
export declare const useVerticalPanGestureHandler: (deps?: Dependencies) => {
    y: Animated.Value<0>;
    translationY: Animated.Value<0>;
    state: Animated.Value<import("react-native-gesture-handler").State>;
    velocityY: Animated.Value<0>;
    gestureHandler: {
        onHandlerStateChange: (...args: any[]) => void;
        onGestureEvent: (...args: any[]) => void;
    };
};
export declare const useHorizontalPanGestureHandler: (deps?: Dependencies) => {
    x: Animated.Value<0>;
    translationX: Animated.Value<0>;
    state: Animated.Value<import("react-native-gesture-handler").State>;
    velocityX: Animated.Value<0>;
    gestureHandler: {
        onHandlerStateChange: (...args: any[]) => void;
        onGestureEvent: (...args: any[]) => void;
    };
};
export declare const useVector: (x: number, y: number, deps?: Dependencies) => import("./Vectors").Vector<Animated.Value<number>>;
export declare const useClock: (deps: Dependencies) => Animated.Clock;
export declare const useValue: <V extends string | number | boolean>(value: V, deps?: Dependencies) => Animated.Value<V>;
export declare const useValues: <V extends string | number | boolean>(values: V[], deps?: Dependencies) => Animated.Value<V>[];
export declare const useNamedValues: <V extends string | number | boolean, K extends string>(values: Record<K, V>, deps?: Dependencies) => Record<K, Animated.Value<V>>;
export declare const useClocks: (numberOfClocks: number, deps?: Dependencies) => Animated.Clock[];
export declare const useDiff: (node: Animated.Node<number>) => Animated.Value<number>;
export declare const useDebug: (values: {
    [key: string]: Animated.Node<number>;
}) => void;
export {};
